#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;
class UserAuthenticator {
private:
    map<string, string> users; // username -> password mapping
    map<string, string> userRoles; // username -> role mapping

public:
    // Constructor
    UserAuthenticator() {
        // Add some sample users and their passwords
        users["user1"] = "password1";
        users["user2"] = "password2";

        // Assign roles to users
        userRoles["user1"] = "admin";
        userRoles["user2"] = "user";
    }

    // Method to authenticate user
    bool authenticateUser(const string& username, const string& password) {
        map<string, string>::iterator it = users.find(username);
        if (it != users.end() && it->second == password) {
            cout << "User authenticated successfully!" << endl;
            return true;
        }
        cout << "Invalid username or password." << endl;
        return false;
 }

    // Method to check authorization and return role
    string authorizeUser(const string& username) {
        map<string, string>::iterator it = userRoles.find(username);
        if (it != userRoles.end()) {
            return it->second;
        }
        return "";
    }

    // Method to add a new user
    void addUser(const string& username, const string& password, const string& role) {
        users[username] = password;
        userRoles[username] = role;
        cout << "User added successfully!" << endl;
    }
};


// Class for patient registration
class PatientRegistration {
private:
    map<string, pair<string, string>> patientDetails; // name -> (contact, date of birth) mapping

public:
    // Method to register a new patient
    void registerPatient(const string& name, const string& contact, const string& dob) {
        patientDetails[name] = make_pair(contact, dob);
        cout << "Patient " << name << " registered successfully!" << endl;
    }

    // Method to display patient details
    void displayPatientDetails(const string& name) {
        map<string, pair<string, string>>::iterator it = patientDetails.find(name);
        if (it != patientDetails.end()) {
            cout << "Name: " << it->first << endl;
            cout << "Contact: " << it->second.first << endl;
            cout << "Date of Birth: " << it->second.second << endl;
        } else {
            cout << "Patient not found." << endl;
        }
    }
};


// Class for doctor registration
class DoctorRegistration {
private:
    map<string, pair<string, string>> doctorDetails; // name -> (contact, specialization) mapping

public:
    // Method to register a new doctor
    void registerDoctor(const string& name, const string& contact, const string& specialization) {
        doctorDetails[name] = make_pair(contact, specialization);
        cout << "Doctor " << name << " registered successfully!" << endl;
    }

    // Method to display doctor details
    void displayDoctorDetails(const string& name) {
        map<string, pair<string, string>>::iterator it = doctorDetails.find(name);
        if (it != doctorDetails.end()) {
            cout << "Name: " << it->first << endl;
            cout << "Contact: " << it->second.first << endl;
            cout << "Specialization: " << it->second.second << endl;
        } else {
            cout << "Doctor not found." << endl;
        }
    }
};

// Class for patient history
class PatientHistory {
private:
    map<string, vector<string>> patientHistory; // name -> list of medical history entries

public:
    // Method to add patient history
    void addPatientHistory(const string& name, const string& history) {
        patientHistory[name].push_back(history);
        cout << "Patient history added successfully!" << endl;
    }

    // Method to display patient history
    void displayPatientHistory(const string& name) {
        map<string, vector<string>>::iterator it = patientHistory.find(name);
        if (it != patientHistory.end()) {
            cout << "Medical History of " << name << ":" << endl;
            for (const string& entry : it->second) {
                cout << "- " << entry << endl;
            }
        } else {
            cout << "Patient not found." << endl;
        }
    }
};